---
title: "Monarch Decoy Analysis"
author: "Kyle Nessen"
format:
    html:
        code-fold: true
        toc: true
        toc-depth: 3
        theme: cosmo
execute:
    echo: true
    warning: false
    message: false
date: last-modified
---
## Establish ROI Labels

```{r}
roi_labels <- c(
    "30101" = "PETG Basic Black",
    "30100" = "PETG Basic White",
    "30300" = "PETG Basic Orange",
    "30401" = "PETG Basic Gold",
    "10101" = "PLA Basic Black",
    "10100" = "PLA Basic White",
    "10300" = "PLA Basic Orange",
    "10401" = "PLA Basic Gold",
    "12101" = "PLA Tough Black",
    "12100" = "PLA Tough White",
    "12300" = "PLA Tough Orange",
    "11101" = "PLA Matte Black",
    "11100" = "PLA Matte White",
    "11300" = "PLA Matte Orange",
    "40101" = "ABS Black",
    "40100" = "ABS White",
    "40300" = "ABS Orange",
    "40402" = "ABS Gold",
    "orange" = "Monarch Orange",
    "white" = "Monarch White",
    "black" = "Monarch Black",
    "gold" = "Monarch Gold"
)
```

## Load data

```{r}
library(tidyverse)
library(here)

# List all CSV files in the data directory
csv_files <- list.files(path = here("data"), pattern = "*.csv", full.names = TRUE)

# Read and combine all CSV files, then clean and transform
df <- csv_files %>%
    # Read each CSV file and combine into one dataframe
    map_df(~ read_csv(., col_types = cols(.default = "c"))) %>%
    # Attempt to convert columns to appropriate types (e.g., numeric, factor)
    type.convert(as.is = TRUE) %>%
    # Correct specific ROI label misentries
    mutate(ROI_Label = str_replace_all(ROI_Label, "\\\\gold", "gold")) %>%
    mutate(ROI_Label = str_replace_all(ROI_Label, "\\\\white", "white")) %>%
    # Apply the defined ROI labels using the roi_labels named vector
    mutate(ROI_Label = recode(ROI_Label, !!!roi_labels)) %>%
    # Ensure the 'Channel' column is correctly set to "UV" for UV images
    mutate(Channel = if_else(Image_Source == "UV", "UV", Channel)) %>%
    # Rename specific channel values for clarity
    mutate(Channel = recode(Channel,
        "B" = "Blue",
        "G" = "Green",
        "UV" = "Ultraviolet"
    )) %>%
    # Create a 'category' column distinguishing "Monarch" from "Filament" based on ROI label
    mutate(category = if_else(str_detect(ROI_Label, "Monarch"), "Monarch", "Filament")) %>%
    # Remove the original 'Image_Source' column as it's no longer needed
    select(-Image_Source) %>%
    # Convert all column names to lowercase for consistency
    rename_with(tolower) %>%
    # Rename 'roi_label' to 'roi' for brevity
    rename(roi = roi_label) %>%
    # Extract the last word from the 'roi' column to create the 'color' column
    mutate(color = word(roi, -1))

# Check total rows
print(paste("Total rows before subsampling:", nrow(df)))
```

## Check Minimum Group Size (Aggregated Across Channels)

Before subsampling, let's determine the smallest total number of observations for any `roi`, combining all channels. This will inform our choice of subsampling size when treating each ROI as a whole.

```{r}
library(dplyr)

# Calculate group sizes per ROI (aggregating channels)
group_sizes <- df %>%
    group_by(roi) %>%
    summarise(count = n(), .groups = "drop") # Count total pixels per ROI

# Find the minimum size
min_size <- min(group_sizes$count)

# Print the minimum size
print(paste("Minimum total sample size across all ROIs (all channels combined):", min_size))

# Optional: Display all group sizes
# print(group_sizes)
```

## Perform Subsampling (Aggregated Across Channels)

Based on the minimum group size (aggregated across channels) and the desire for balanced histograms, we will randomly sample a fixed number of observations from each `roi`. This sample will include pixels from any channel belonging to that ROI.

```{r}
# Define the target sample size per group
# Adjust this based on the min_size output above if necessary
target_sample_size <- 1000 # Or potentially min_size

# Ensure target_sample_size is not greater than the actual minimum size
if (target_sample_size > min_size) {
    print(paste("Warning: Target sample size", target_sample_size, "is larger than the minimum group size", min_size, ". Adjusting target size to", min_size))
    target_sample_size <- min_size
}

print(paste("Using target sample size:", target_sample_size))

# Set seed for reproducibility
set.seed(123)

# Perform subsampling per ROI
df_subsampled <- df %>%
    group_by(roi) %>% # Group only by ROI
    slice_sample(n = target_sample_size, replace = FALSE) %>% # Sample N pixels from each ROI, regardless of channel
    ungroup() # Ungroup for subsequent operations

# Check total rows after subsampling
print(paste("Total rows after subsampling:", nrow(df_subsampled)))

# Verify counts per ROI in the subsampled data
# subsampled_counts <- df_subsampled %>% count(roi)
# print(subsampled_counts)

```


## Histograms by color (Using Subsampled Data, Channels Combined)

```{r}
# Get unique colors from the subsampled data
unique_colors_subsampled <- unique(df_subsampled$color)

# Loop through each color and create a plot using the subsampled data
for (col in unique_colors_subsampled) {
    # Filter subsampled data for the current color
    color_df_subsampled <- df_subsampled %>% filter(color == col)

    # Create the plot using the subsampled data, channels combined
    p <- ggplot(color_df_subsampled, aes(x = value)) +
        geom_histogram(bins = 30) + # Adjust bins as needed
        # facet_grid(channel ~ roi, scales = "free_y") + # Old: Facet by channel and roi
        facet_wrap(~roi, scales = "free_y") + # New: Facet only by roi
        labs(
            title = paste("Histogram of Values for", col, "ROIs (Channels Combined)"),
            x = "Value (All Channels)",
            y = "Frequency"
        ) +
        theme_minimal() # Use a minimal theme

    # Print the plot
    print(p)
}
```

## Statistical Comparison (Kolmogorov-Smirnov Test, Channels Combined)

Now that we have subsampled data aggregated by ROI (channels combined), we can perform statistical tests to compare the overall distribution of pixel values for each filament ROI against the corresponding Monarch ROI within each color group.

A small p-value suggests the distributions are significantly different. The D statistic measures the maximum distance between the cumulative distribution functions; smaller D indicates more similarity.

```{r}
# Function to perform and format K-S test (channels combined)
run_ks_test_combined <- function(monarch_data, filament_data, roi_filament, current_color) {
    # Ensure there's data for both monarch and filament for this specific comparison
    if (nrow(monarch_data) > 0 && nrow(filament_data) > 0) {
        # Compare the 'value' column directly, as channels are already combined in the subsample
        ks_result <- ks.test(monarch_data$value, filament_data$value)
        return(tibble(
            color = current_color,
            # channel = current_channel, # Removed channel
            filament_roi = roi_filament,
            ks_statistic_D = ks_result$statistic,
            p_value = ks_result$p.value
        ))
    } else {
        # Return NA or an empty tibble if data is missing for the pair
        return(tibble(
            color = current_color,
            # channel = current_channel, # Removed channel
            filament_roi = roi_filament,
            ks_statistic_D = NA,
            p_value = NA
        ))
    }
}

# Separate Monarch and Filament data from the subsampled set
monarch_subsampled <- df_subsampled %>% filter(category == "Monarch")
filament_subsampled <- df_subsampled %>% filter(category == "Filament")

# Get unique colors present in Monarch data
monarch_colors <- monarch_subsampled %>%
    distinct(color) %>%
    pull(color)

# Initialize an empty list to store results
ks_results_list <- list()

# Loop through each Monarch color group
for (current_color in monarch_colors) {
    # Get the Monarch data for this color (all channels combined)
    monarch_group_data <- monarch_subsampled %>%
        filter(color == current_color)

    # Get all filament ROIs matching this color
    filament_rois_for_color <- filament_subsampled %>%
        filter(color == current_color) %>%
        distinct(roi) %>%
        pull(roi)

    # Loop through each matching filament ROI
    for (roi_filament in filament_rois_for_color) {
        # Get the filament data for this specific ROI (all channels combined)
        filament_group_data <- filament_subsampled %>%
            filter(roi == roi_filament) # Filter only by ROI, as channels are combined

        # Run the K-S test (combined version) and store the result
        test_result <- run_ks_test_combined(monarch_group_data, filament_group_data, roi_filament, current_color)
        ks_results_list[[length(ks_results_list) + 1]] <- test_result
    }
}

# Combine results into a single dataframe
ks_results_df <- bind_rows(ks_results_list) %>%
    arrange(color, ks_statistic_D) # Sort by similarity (smaller D is better) within each color

# Print the results table
print(ks_results_df)

# You can further analyze ks_results_df, e.g., find the filament_roi with the smallest D statistic
# for each color/channel combination to identify the 'best' match based on this test.
# Example: Find best match for each color group
best_matches <- ks_results_df %>%
   group_by(color) %>% # Group only by color
   filter(!is.na(ks_statistic_D)) %>% # Ensure D is not NA
   slice_min(order_by = ks_statistic_D, n = 1) %>%
   ungroup()
print("Best matches (channels combined) based on minimum K-S statistic (D):")
print(best_matches)

```
